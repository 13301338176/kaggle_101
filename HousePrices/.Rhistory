install.packages("dplyr","ggplot2","kernlab","plot3D","glmnet")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("kernlab")
install.packages("data.table")
install.packages("plot3D")
install.packages("glmnet")
install.packages("caret", dependencies = c("Depends", "Suggests"))
library(caret)
install.packages("xgboost")
library(swirl)
swirl()
install_course("The R Programming Environment")
swirl()
library(readr)
datapath
print(datapath)
datafile <- file.path(datapath)
datafile <- file.path(datapath, "urban.csv.gz")
urban <- read_csv(datafile)
head(urban)
urban <- read_csv(datafile, col_types = cols_only(zcat5 = col_character()))
info()
urban <- read_csv(datafile, col_types = "nccnn")
urban <- read_csv(datafile, col_types = "cccdc")
urban <- read_csv(datafile, col_types = "cccd")
urban <- read_csv(datafile, col_types = "ccc-")
urban <- read_csv(datafile, col_types = "ccc-d")
urban <- read_csv(datafile, col_types = "cccd-")
head(urban)
urban <- read_csv(datafile, col_types = "cccd-", n_max = 100)
ls()
class(plants)
dim(plants)
nwors(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
head(worldcup)
submit()
worldcup %>% select(c(Time,Passes,Tackles,Saves)) %>% slice(1:4)
worldcup %>% select(c(Time,Passes,Tackles,Saves)) %>% head(4)
submit()
worldcup %>% select(c(Time,Passes,Tackles,Saves))
submit()
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% summarise(mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% summarise_each(mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% summarise_each_(mean)
?summarise
?summarise_each
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% summarise_each(mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% summarise_each(funs=c(mean))
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% summarise_each_(funs=c(mean))
worldcup %>%
select(Time, Passes, Tackles, Saves) %>% summarise_each(funs(mean))
submit()
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves)) %>% gather(mean, var)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves)) %>% gather(var, mean)
submit()
round(2.3333, 2)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves)) %>%
gather(var, mean) %>% round(1)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves)) %>%
gather(var, mean) %>% round(1)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves)) %>%
gather(var, mean)
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves)) %>%
gather(var, mean) %>% mutate(mean=round(mean,2))
worldcup %>%
select(Time, Passes, Tackles, Saves) %>%
summarize(Time = mean(Time),
Passes = mean(Passes),
Tackles = mean(Tackles),
Saves = mean(Saves)) %>%
gather(var, mean) %>% mutate(mean=round(mean,1))
submit()
head(titanic)
submit()
head(na.rm(titanic$Age))
titanic %>%
select(Survived, Pclass, Age, Sex) %>% filter(is.na(Age) == FALSE)
submit()
str(titanic_2)
titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = ifelse(Age < 15, "Under 15", ifelse(Age > 50, "Over 50", "15 to 50")))
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = ifelse(Age < 15, "Under 15", ifelse(Age > 50, "Over 50", "15 to 50")))
str(titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = factor(ifelse(Age < 15, "Under 15", ifelse(Age > 50, "Over 50", "15 to 50"))))
str(titanic_3)
submit()
?cut
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(breaks = c(15,50)))
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(15,50)))
head(titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(15,50), include.lowest = TRUE))
head(titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(0,15,50), include.highest = TRUE))
head(titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(0,15,50,120), include.highest = TRUE))
head(titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(0,15,50,120), labels = c("Under 15", "15 to 50", "Over 50")))
head(titanic_3)
submit()
titanic_3
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(0,15,50), include.highest = TRUE, labels = c("Under 15", "15 to 50", "Over 50")))
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(0,15,50), labels = c("Under 15", "15 to 50", "Over 50")))
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(0,15,50), right=FALSE, labels = c("Under 15", "15 to 50", "Over 50")))
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(0,15,50), right=FALSE))
head(titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(0,15,50,Inf), right=FALSE))
head(titanic_3)
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks = c(0,15,50,Inf), ordered_result = TRUE, labels = c("Under 15", "15 to 50", "Over 50")))
head(titanic_3)
head(titanic_3,100)
head(titanic_3,200)
submit()
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks =  c(0, 14, 50, 150), include.lowest=TRUE, labels = c("Under 15", "15 to 50", "Over 50")))
head(titanic_3)
submit()
titanic_3
titanic_3 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>% mutate(agecat = cut(Age, breaks =  c(0, 14, 50, 150), include.lowest=TRUE, labels = c("Under 15", "under 15" ,"15 to 50", "Over 50")))
skip()
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass,agecat,sex) %>%
summarize(survivors = n(), perc_survived = survivors/sum(Survived)*100)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass,agecat,Sex) %>%
summarize(survivors = n(), perc_survived = survivors/sum(Survived)*100)
head(titanic_4)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass,agecat,Sex) %>%
summarize(survivors = n(), perc_survived = survivors/sum(survivors)*100)
head(titanic_4)
lenght(titanic)
nrow(titanic)
titanic_4 <- titanic %>%
select(Survived, Pclass, Age, Sex) %>%
filter(!is.na(Age)) %>%
mutate(agecat = cut(Age, breaks = c(0, 14.99, 50, 150),
include.lowest = TRUE,
labels = c("Under 15", "15 to 50",
"Over 50"))) %>%
group_by(Pclass,agecat,Sex) %>%
summarize(N = n(), survivors = sum(Survived == 1) ,perc_survived = survivors/N*100)
titanic_4
submit()
skip()
setwd("~/Works/Rworkspace/HousePrices/")
nModels <- 3
nfolds <- 5
# Is this for verifying the stacking method?
lStackVefiry = TRUE
source("stacking/cleanData.R")
source("stacking/createStackingFolds.R")
if (lStackVefiry == TRUE){
listFolds <- createStacks(nfolds, lStackVefiry); foldsTrain <- listFolds[[1]]; foldsHoldOut <- listFolds[[2]]
} else{
foldsTrain <- createStacks(nfolds, lStackVefiry)
}
source("stacking/trainXGB.R")
source("stacking/trainSVR.R")
source("stacking/trainNNET.R")
source("stacking/createOOS.R")
save(trainOOS, file = "trainOOS.RData")
head(trainOOS)
foldsTrain
inTraom
inTrain
length(inTrain)
head(trainOOS)
inTrain <- unlist(foldsTrain); inHoldOut <- unlist(foldsHoldOut)
length(inTrain)
length(inHoldOut)
length(inHoldOut)+ length(inTrain)
predXGB <- trainXGB(inTrain, inHoldOut, paramxgb, nrounds = 811)
predSVR <- trainSVR(inTrain, inHoldOut, paramsvr)
predNNET <- trainNNET(inTrain, inHoldOut, paramnnet)
yHoldOut <- outcomes[inHoldOut]
trainHoldOut <- data.frame(Id = Id.train[inHoldOut], predXGB = predXGB, predSVR = predSVR, predNNET = predNNET,
y = yHoldOut)
trainHoldOut
length(trainHoldOut)
dim(trainHoldOut)
length(inHoldOut)
head(trainHoldOut)
source("stacking/trainLevel2.R")
predStack <- trainLevel2(trainOOS, trainHoldOut, cvfolds = 5)
predStack
rmse1 <- sqrt( mean( (yHoldOut - predXGB)^2 ) )
rmse1
rmse2 <- sqrt( mean( (yHoldOut - predSVR)^2 ) )
rmse2
rmse3 <- sqrt( mean( (yHoldOut - predNNET)^2 ) )
rmse3
rmseStack <- sqrt( mean( (yHoldOut - predStack)^2 ) )
rmseStack
source("stacking/trainXGB.R")
source("stacking/trainSVR.R")
source("stacking/trainNNET.R")
source("stacking/modelParams.R")
lStackVefiry = FALSE
source("stacking/createOOS.R")
nActualFolds
foldsTrain
foldsTrain <- createStacks(nfolds, lStackVefiry)
foldsTrain
nModels <- 3
nfolds <- 5
lStackVefiry = FALSE
source("stacking/cleanData.R")
source("stacking/createStackingFolds.R")
source("stacking/trainXGB.R")
source("stacking/trainSVR.R")
source("stacking/trainNNET.R")
source("stacking/modelParams.R")
foldsTrain <- createStacks(nfolds, lStackVefiry)
foldsTrain
source("stacking/createOOS.R")
foldsTrain
source("stacking/trainLevel2.R")
predXGB <- testXGB(trainSparse, testSparse, nrounds = 811)
predXGB <- testXGB(trainSparse, testSparse, paramxgb, nrounds = 811)
predSVR <- testSVR(trainSparse, testSparse, paramsvr)
predNNET <- testNNET(trainSparse, testSparse, paramnnet)
testOOS <- data.frame(Id = Id.test, predXGB = predXGB, predSVR = predSVR, predNNET = predNNET)
head(testOOS)
tail(testOOS)
source("stacking/trainLevel2.R")
predStack <- trainLevel2(trainOOS, testOOS, cvfolds = 5, lFinalFit = TRUE)
predStack
submission <- data.frame(Id = Id.test, SalePrice = exp(predStack))
write.csv(submission,"submissionStacked.csv",row.names = FALSE)
submission
head(submission)
submission <- data.frame(Id = Id.test, SalePrice = exp(predStack))
head(submission)
colnames(submission)
Id.test
predStack
str(predSVR)
str(predStack)
colnames(submission) <- c("Id", "SalePrice")
head(submission)
write.csv(submission,"submissionStacked.csv",row.names = FALSE)
